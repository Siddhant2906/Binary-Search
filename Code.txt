#include <bits/stdc++.h>
#include <limits>
using namespace std;
typedef unsigned long long int ull;
typedef long long int ll;
#define fi(i,n) for( ll i=0 ; i<n ; i++ )
#define f(i, a, b) for( ll i=a ; i<b ; i++ )
#define vi vector<int>
#define pb push_back
#define MOD 1000000007
ll digits(ll n)
{
    return floor(log10(double(n))) + 1;
}
ll SieveOfEratosthenes(ll n)
{
    vector<bool>prime(n+1);
    int ans = 0;
    for(int i =0; i<=n; i++)
        prime[i] = true;
    prime[1] = false;
    for (ll p=2; p*p<=n; p++)
    {
        if (prime[p] == true)
        {
            for (ll i=p*p; i<=n; i += p)
                prime[i] = false;
        }
    }
    for(int i = 2; i<=n; i++)
    {
        if(prime[i])
        {
            ans++;
        }
    }
    return ans;
}
void permute(string a, int l, int r)
{
    if (l == r)
    {
        cout<<a<<endl;
    }
    else
    {
        for (int i = l; i <= r; i++)
        {
            swap(a[l], a[i]);
            permute(a, l+1, r);
        }
    }
}
ll modularExponentiation(ll x,ll n,ll M)
{
    ll result = 1;
    ll ans = 1;

    while(n>0)
    {
        if(n % 2 ==1)
        {
            result = (result*x)%MOD;
            ans = (ans + result)%MOD;
        }
        n = n/2;
        if(n>0)
        {

            x = x*x;
        }
    }
    return ans;
}
ll d, x, y;
void extendedEuclid(ll A, ll B)
{
    // for computing modular inverse
    // make b as Mod such that gcd of mod and a is 1
    // also the coeff x here will denote the modular inverse of a
    if(B == 0)
    {
        d = A;
        x = 1;
        y = 0;
    }
    else
    {
        extendedEuclid(B, A%B);
        int temp = x;
        x = y;
        y = temp - (A/B)*y;
        // x = y1
        // y = x1 - y1*(a/b);
    }
}

ll modInverse(ll A, ll M)
{
    extendedEuclid(A,M);
    return (x%M+M)%M;    //x may be negative
}
bool isPrime(ll x)
{
    if (x == 0 || x == 1)
        return false;
    for (ll i = 2; i * i <= x; ++i)
        if (x % i == 0)
            return false;
    return true;
}
void search(int arr[], int low, int high) 
{ 
      
    // Base cases 
    if (low > high) 
        return; 
  
    if (low == high) 
    { 
        cout << "The required element is " 
             << arr[low]; 
        return; 
    } 
  
    // Find the middle point 
    int mid = (low + high) / 2; 
  
    // If mid is even and element next to mid is 
    // same as mid, then output element lies on 
    // right side, else on left side 
    if (mid % 2 == 0) 
    { 
        if (arr[mid] == arr[mid + 1]) 
            search(arr, mid + 2, high); 
        else
            search(arr, low, mid); 
    } 
      
    // If mid is odd 
    else 
    { 
        if (arr[mid] == arr[mid - 1]) 
            search(arr, mid + 1, high); 
        else
            search(arr, low, mid - 1); 
    } 
} 
/ Driver code 
int main() 
{ 
    int arr[] = { 1, 1, 2, 4, 4, 5, 5, 6, 6 }; 
    int len = sizeof(arr)/sizeof(arr[0]); 
      
    search(arr, 0, len - 1); 
      
    return 0; 
} 

